{"ast":null,"code":"const analogicTypes = {\n  0: {\n    id: \"Left analogic\",\n    direction: {\n      0: \"left\",\n      //if value < 0\n      1: \"right\" // if value > 0\n\n    }\n  },\n  1: {\n    id: \"Left analogic\",\n    direction: {\n      0: \"up\",\n      //if value < 0\n      1: \"down\" // if value > 0\n\n    }\n  },\n  2: {\n    id: \"Right analogic\",\n    direction: {\n      0: \"left\",\n      //if value < 0\n      1: \"right\" // if value > 0\n\n    }\n  },\n  3: {\n    id: \"Right analogic\",\n    direction: {\n      0: \"up\",\n      //if value < 0\n      1: \"down\" // if value > 0\n\n    }\n  }\n};\nlet gamepadInput = null;\n\nconst gamepadEvent = (gamepad, callback) => {\n  const gamepadIndex = gamepad.index;\n  setInterval(() => {\n    if (gamepadIndex !== undefined) {\n      // a gamepad is connected and has an index\n      const myGamepad = navigator.getGamepads()[gamepadIndex];\n\n      if (myGamepad) {\n        myGamepad.buttons.map(e => e.pressed).forEach((isPressed, buttonIndex) => {\n          if (isPressed) {\n            gamepadInput = {\n              typeInput: \"button\",\n              gamepad: myGamepad.id,\n              buttonPressed: buttonIndex\n            };\n            callback(gamepadInput);\n          }\n        });\n        myGamepad.axes.map((e, index) => {\n          let tempvalue = e.toString() * 100;\n\n          if (tempvalue > 20 || tempvalue < -20) {\n            let direction = tempvalue > 0 ? analogicTypes[index].direction[1] : analogicTypes[index].direction[0];\n            let analogicType = analogicTypes[index];\n            gamepadInput = {\n              typeInput: \"analogic\",\n              gamepad: myGamepad.id,\n              analogicType: analogicType,\n              direction: direction,\n              percentualeMovement: tempvalue\n            };\n            callback(gamepadInput);\n          }\n\n          return null;\n        });\n      }\n    }\n  }, 100);\n};\n\nexport { gamepadEvent, gamepadInput };","map":{"version":3,"sources":["C:/Users/markm/OneDrive/Desktop/gamedeveloper/react-game/src/game-tools/utils/hooks/gamepad-press/utils/gameInputEvent.js"],"names":["analogicTypes","id","direction","gamepadInput","gamepadEvent","gamepad","callback","gamepadIndex","index","setInterval","undefined","myGamepad","navigator","getGamepads","buttons","map","e","pressed","forEach","isPressed","buttonIndex","typeInput","buttonPressed","axes","tempvalue","toString","analogicType","percentualeMovement"],"mappings":"AACA,MAAMA,aAAa,GAAG;AAClB,KAAG;AACCC,IAAAA,EAAE,EAAE,eADL;AAECC,IAAAA,SAAS,EAAE;AACP,SAAG,MADI;AACI;AACX,SAAG,OAFI,CAEI;;AAFJ;AAFZ,GADe;AAQlB,KAAG;AACCD,IAAAA,EAAE,EAAE,eADL;AAECC,IAAAA,SAAS,EAAE;AACP,SAAG,IADI;AACE;AACT,SAAG,MAFI,CAEG;;AAFH;AAFZ,GARe;AAelB,KAAG;AACCD,IAAAA,EAAE,EAAE,gBADL;AAECC,IAAAA,SAAS,EAAE;AACP,SAAG,MADI;AACI;AACX,SAAG,OAFI,CAEI;;AAFJ;AAFZ,GAfe;AAsBlB,KAAG;AACCD,IAAAA,EAAE,EAAE,gBADL;AAECC,IAAAA,SAAS,EAAE;AACP,SAAG,IADI;AACE;AACT,SAAG,MAFI,CAEG;;AAFH;AAFZ;AAtBe,CAAtB;AA8BA,IAAIC,YAAY,GAAG,IAAnB;;AAGA,MAAMC,YAAY,GAAG,CAACC,OAAD,EAAUC,QAAV,KAAuB;AAExC,QAAMC,YAAY,GAAGF,OAAO,CAACG,KAA7B;AAEAC,EAAAA,WAAW,CAAC,MAAM;AACd,QAAGF,YAAY,KAAKG,SAApB,EAA+B;AAC3B;AACA,YAAMC,SAAS,GAAGC,SAAS,CAACC,WAAV,GAAwBN,YAAxB,CAAlB;;AACA,UAAGI,SAAH,EAAa;AACTA,QAAAA,SAAS,CAACG,OAAV,CAAkBC,GAAlB,CAAsBC,CAAC,IAAIA,CAAC,CAACC,OAA7B,EAAsCC,OAAtC,CAA8C,CAACC,SAAD,EAAYC,WAAZ,KAA4B;AACtE,cAAGD,SAAH,EAAc;AACVhB,YAAAA,YAAY,GAAG;AACXkB,cAAAA,SAAS,EAAE,QADA;AAEXhB,cAAAA,OAAO,EAAEM,SAAS,CAACV,EAFR;AAGXqB,cAAAA,aAAa,EAAEF;AAHJ,aAAf;AAKAd,YAAAA,QAAQ,CAACH,YAAD,CAAR;AACH;AACJ,SATD;AAWAQ,QAAAA,SAAS,CAACY,IAAV,CAAeR,GAAf,CAAmB,CAACC,CAAD,EAAKR,KAAL,KAAe;AAC9B,cAAIgB,SAAS,GAAGR,CAAC,CAACS,QAAF,KAAa,GAA7B;;AACA,cAAGD,SAAS,GAAG,EAAZ,IAAkBA,SAAS,GAAG,CAAC,EAAlC,EAAqC;AACjC,gBAAItB,SAAS,GAAIsB,SAAS,GAAG,CAAb,GAAiBxB,aAAa,CAACQ,KAAD,CAAb,CAAqBN,SAArB,CAA+B,CAA/B,CAAjB,GAAqDF,aAAa,CAACQ,KAAD,CAAb,CAAqBN,SAArB,CAA+B,CAA/B,CAArE;AACA,gBAAIwB,YAAY,GAAG1B,aAAa,CAACQ,KAAD,CAAhC;AACAL,YAAAA,YAAY,GAAG;AACXkB,cAAAA,SAAS,EAAE,UADA;AAEXhB,cAAAA,OAAO,EAAEM,SAAS,CAACV,EAFR;AAGXyB,cAAAA,YAAY,EAAEA,YAHH;AAIXxB,cAAAA,SAAS,EAAEA,SAJA;AAKXyB,cAAAA,mBAAmB,EAAEH;AALV,aAAf;AAOAlB,YAAAA,QAAQ,CAACH,YAAD,CAAR;AACH;;AACD,iBAAO,IAAP;AACH,SAfD;AAgBH;AAEJ;AACJ,GAnCU,EAmCR,GAnCQ,CAAX;AAsCH,CA1CD;;AA8CA,SAAQC,YAAR,EAAsBD,YAAtB","sourcesContent":["\r\nconst analogicTypes = {\r\n    0: {\r\n        id: \"Left analogic\",\r\n        direction: {\r\n            0: \"left\", //if value < 0\r\n            1: \"right\" // if value > 0\r\n        }\r\n    },\r\n    1: {\r\n        id: \"Left analogic\",\r\n        direction: {\r\n            0: \"up\", //if value < 0\r\n            1: \"down\" // if value > 0\r\n        }\r\n    },\r\n    2: {\r\n        id: \"Right analogic\",\r\n        direction: {\r\n            0: \"left\", //if value < 0\r\n            1: \"right\" // if value > 0\r\n        }\r\n    },\r\n    3: {\r\n        id: \"Right analogic\",\r\n        direction: {\r\n            0: \"up\", //if value < 0\r\n            1: \"down\" // if value > 0\r\n        }\r\n    }\r\n}\r\nlet gamepadInput = null;\r\n\r\n\r\nconst gamepadEvent = (gamepad, callback) => {\r\n\r\n    const gamepadIndex = gamepad.index;\r\n\r\n    setInterval(() => {\r\n        if(gamepadIndex !== undefined) {\r\n            // a gamepad is connected and has an index\r\n            const myGamepad = navigator.getGamepads()[gamepadIndex];\r\n            if(myGamepad){\r\n                myGamepad.buttons.map(e => e.pressed).forEach((isPressed, buttonIndex) => {\r\n                    if(isPressed) {\r\n                        gamepadInput = {\r\n                            typeInput: \"button\",\r\n                            gamepad: myGamepad.id ,\r\n                            buttonPressed: buttonIndex\r\n                        }\r\n                        callback(gamepadInput);\r\n                    }\r\n                })\r\n\r\n                myGamepad.axes.map((e , index) => {\r\n                    let tempvalue = e.toString()*100;\r\n                    if(tempvalue > 20 || tempvalue < -20){\r\n                        let direction = (tempvalue > 0)? analogicTypes[index].direction[1] : analogicTypes[index].direction[0];\r\n                        let analogicType = analogicTypes[index];\r\n                        gamepadInput = {\r\n                            typeInput: \"analogic\",\r\n                            gamepad: myGamepad.id ,\r\n                            analogicType: analogicType,\r\n                            direction: direction,\r\n                            percentualeMovement: tempvalue\r\n                        }\r\n                        callback(gamepadInput);\r\n                    }\r\n                    return null;\r\n                });\r\n            }\r\n\r\n        }\r\n    }, 100);\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport {gamepadEvent, gamepadInput}\r\n"]},"metadata":{},"sourceType":"module"}