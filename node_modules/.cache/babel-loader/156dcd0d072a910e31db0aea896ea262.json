{"ast":null,"code":"const analogicType = {\n  0: {\n    id: \"Left analogic\",\n    direction: {\n      0: \"left\",\n      //if value < 0\n      1: \"right\" // if value > 0\n\n    }\n  },\n  1: {\n    id: \"Left analogic\",\n    direction: {\n      0: \"up\",\n      //if value < 0\n      1: \"down\" // if value > 0\n\n    }\n  },\n  2: {\n    id: \"Right analogic\",\n    direction: {\n      0: \"left\",\n      //if value < 0\n      1: \"right\" // if value > 0\n\n    }\n  },\n  3: {\n    id: \"Right analogic\",\n    direction: {\n      0: \"up\",\n      //if value < 0\n      1: \"down\" // if value > 0\n\n    }\n  }\n};\nlet gamepadInput = null;\n\nconst gamepadEvent = e => {\n  const gamepadIndex = e.gamepad.index;\n  setInterval(() => {\n    if (gamepadIndex !== undefined) {\n      // a gamepad is connected and has an index\n      const myGamepad = navigator.getGamepads()[gamepadIndex];\n\n      if (myGamepad) {\n        myGamepad.buttons.map(e => e.pressed).forEach((isPressed, buttonIndex) => {\n          if (isPressed) {\n            gamepadInput = {\n              typeInput: \"button\",\n              gamepad: myGamepad.id,\n              buttonPressed: buttonIndex\n            };\n            console.log(gamepadInput);\n          }\n        });\n        myGamepad.axes.map((e, index) => {\n          let tempvalue = e.toString() * 100;\n\n          if (tempvalue > 20 || tempvalue < -20) {\n            let direction = tempvalue > 0 ? analogicType[index].direction[1] : analogicType[index].direction[0];\n            gamepadInput = {\n              typeInput: \"analogic\",\n              gamepad: myGamepad.id,\n              direction: direction,\n              percentualeMovement: tempvalue\n            };\n            console.log(gamepadInput);\n          }\n\n          return null;\n        });\n      }\n    }\n  }, 100);\n  return gamepadInput;\n};\n\nexport { gamepadInput };","map":{"version":3,"sources":["C:/Users/markm/OneDrive/Desktop/gamedeveloper/react-game/src/game-tools/utils/hooks/gamepad-press/utils/gameInputEvent.js"],"names":["analogicType","id","direction","gamepadInput","gamepadEvent","e","gamepadIndex","gamepad","index","setInterval","undefined","myGamepad","navigator","getGamepads","buttons","map","pressed","forEach","isPressed","buttonIndex","typeInput","buttonPressed","console","log","axes","tempvalue","toString","percentualeMovement"],"mappings":"AACA,MAAMA,YAAY,GAAG;AACjB,KAAG;AACCC,IAAAA,EAAE,EAAE,eADL;AAECC,IAAAA,SAAS,EAAE;AACP,SAAG,MADI;AACI;AACX,SAAG,OAFI,CAEI;;AAFJ;AAFZ,GADc;AAQjB,KAAG;AACCD,IAAAA,EAAE,EAAE,eADL;AAECC,IAAAA,SAAS,EAAE;AACP,SAAG,IADI;AACE;AACT,SAAG,MAFI,CAEG;;AAFH;AAFZ,GARc;AAejB,KAAG;AACCD,IAAAA,EAAE,EAAE,gBADL;AAECC,IAAAA,SAAS,EAAE;AACP,SAAG,MADI;AACI;AACX,SAAG,OAFI,CAEI;;AAFJ;AAFZ,GAfc;AAsBjB,KAAG;AACCD,IAAAA,EAAE,EAAE,gBADL;AAECC,IAAAA,SAAS,EAAE;AACP,SAAG,IADI;AACE;AACT,SAAG,MAFI,CAEG;;AAFH;AAFZ;AAtBc,CAArB;AA8BA,IAAIC,YAAY,GAAG,IAAnB;;AAEA,MAAMC,YAAY,GAAIC,CAAD,IAAO;AACxB,QAAMC,YAAY,GAAGD,CAAC,CAACE,OAAF,CAAUC,KAA/B;AAEAC,EAAAA,WAAW,CAAC,MAAM;AACd,QAAGH,YAAY,KAAKI,SAApB,EAA+B;AAC3B;AACA,YAAMC,SAAS,GAAGC,SAAS,CAACC,WAAV,GAAwBP,YAAxB,CAAlB;;AACA,UAAGK,SAAH,EAAa;AACTA,QAAAA,SAAS,CAACG,OAAV,CAAkBC,GAAlB,CAAsBV,CAAC,IAAIA,CAAC,CAACW,OAA7B,EAAsCC,OAAtC,CAA8C,CAACC,SAAD,EAAYC,WAAZ,KAA4B;AACtE,cAAGD,SAAH,EAAc;AACVf,YAAAA,YAAY,GAAG;AACXiB,cAAAA,SAAS,EAAE,QADA;AAEXb,cAAAA,OAAO,EAAEI,SAAS,CAACV,EAFR;AAGXoB,cAAAA,aAAa,EAAEF;AAHJ,aAAf;AAKAG,YAAAA,OAAO,CAACC,GAAR,CAAYpB,YAAZ;AACH;AACJ,SATD;AAWAQ,QAAAA,SAAS,CAACa,IAAV,CAAeT,GAAf,CAAmB,CAACV,CAAD,EAAKG,KAAL,KAAe;AAC9B,cAAIiB,SAAS,GAAGpB,CAAC,CAACqB,QAAF,KAAa,GAA7B;;AACA,cAAGD,SAAS,GAAG,EAAZ,IAAkBA,SAAS,GAAG,CAAC,EAAlC,EAAqC;AACjC,gBAAIvB,SAAS,GAAIuB,SAAS,GAAG,CAAb,GAAiBzB,YAAY,CAACQ,KAAD,CAAZ,CAAoBN,SAApB,CAA8B,CAA9B,CAAjB,GAAoDF,YAAY,CAACQ,KAAD,CAAZ,CAAoBN,SAApB,CAA8B,CAA9B,CAApE;AACAC,YAAAA,YAAY,GAAG;AACXiB,cAAAA,SAAS,EAAE,UADA;AAEXb,cAAAA,OAAO,EAAEI,SAAS,CAACV,EAFR;AAGXC,cAAAA,SAAS,EAAEA,SAHA;AAIXyB,cAAAA,mBAAmB,EAAEF;AAJV,aAAf;AAQAH,YAAAA,OAAO,CAACC,GAAR,CAAYpB,YAAZ;AACH;;AACD,iBAAO,IAAP;AACH,SAfD;AAgBH;AAEJ;AACJ,GAnCU,EAmCR,GAnCQ,CAAX;AAqCA,SAAOA,YAAP;AACH,CAzCD;;AA4CA,SAAQA,YAAR","sourcesContent":["\r\nconst analogicType = {\r\n    0: {\r\n        id: \"Left analogic\",\r\n        direction: {\r\n            0: \"left\", //if value < 0\r\n            1: \"right\" // if value > 0\r\n        }\r\n    },\r\n    1: {\r\n        id: \"Left analogic\",\r\n        direction: {\r\n            0: \"up\", //if value < 0\r\n            1: \"down\" // if value > 0\r\n        }\r\n    },\r\n    2: {\r\n        id: \"Right analogic\",\r\n        direction: {\r\n            0: \"left\", //if value < 0\r\n            1: \"right\" // if value > 0\r\n        }\r\n    },\r\n    3: {\r\n        id: \"Right analogic\",\r\n        direction: {\r\n            0: \"up\", //if value < 0\r\n            1: \"down\" // if value > 0\r\n        }\r\n    }\r\n}\r\nlet gamepadInput = null;\r\n\r\nconst gamepadEvent = (e) => {\r\n    const gamepadIndex = e.gamepad.index;\r\n\r\n    setInterval(() => {\r\n        if(gamepadIndex !== undefined) {\r\n            // a gamepad is connected and has an index\r\n            const myGamepad = navigator.getGamepads()[gamepadIndex];\r\n            if(myGamepad){\r\n                myGamepad.buttons.map(e => e.pressed).forEach((isPressed, buttonIndex) => {\r\n                    if(isPressed) {\r\n                        gamepadInput = {\r\n                            typeInput: \"button\",\r\n                            gamepad: myGamepad.id ,\r\n                            buttonPressed: buttonIndex\r\n                        }\r\n                        console.log(gamepadInput);\r\n                    }\r\n                })\r\n\r\n                myGamepad.axes.map((e , index) => {\r\n                    let tempvalue = e.toString()*100;\r\n                    if(tempvalue > 20 || tempvalue < -20){\r\n                        let direction = (tempvalue > 0)? analogicType[index].direction[1] : analogicType[index].direction[0];\r\n                        gamepadInput = {\r\n                            typeInput: \"analogic\",\r\n                            gamepad: myGamepad.id ,\r\n                            direction: direction,\r\n                            percentualeMovement: tempvalue\r\n                        }\r\n\r\n\r\n                        console.log(gamepadInput);\r\n                    }\r\n                    return null;\r\n                });\r\n            }\r\n\r\n        }\r\n    }, 100);\r\n\r\n    return gamepadInput;\r\n}\r\n\r\n\r\nexport {gamepadInput}\r\n"]},"metadata":{},"sourceType":"module"}