{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nexport default function useGamepads(fn) {\n  _s();\n\n  var gamepads = {};\n  var haveEvents = ('ongamepadconnected' in window);\n  var controllers = {};\n\n  function connecthandler(e) {\n    addgamepad(e.gamepad);\n  }\n\n  function gamepadHandler(event, connecting) {\n    var gamepad = event.gamepad; // Note:\n    // gamepad === navigator.getGamepads()[gamepad.index]\n\n    if (connecting) {\n      gamepads[gamepad.index] = gamepad;\n    } else {\n      delete gamepads[gamepad.index];\n    }\n  }\n\n  useEffect(() => {\n    window.addEventListener('gamepadconnected', function (e) {\n      gamepadHandler(e, true);\n    }, false);\n    window.addEventListener('gamepaddisconnected', function (e) {\n      gamepadHandler(e, false);\n    }, false);\n  }, [fn]);\n}\n\n_s(useGamepads, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");","map":{"version":3,"sources":["C:/Users/markm/OneDrive/Desktop/gamedeveloper/react-game/src/game-tools/utils/hooks/gamepad-press/useGamePad.js"],"names":["React","useEffect","useRef","useState","useGamepads","fn","gamepads","haveEvents","window","controllers","connecthandler","e","addgamepad","gamepad","gamepadHandler","event","connecting","index","addEventListener"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAkD,OAAlD;AAEA,eAAe,SAASC,WAAT,CAAqBC,EAArB,EAAyB;AAAA;;AACpC,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,UAAU,IAAG,wBAAwBC,MAA3B,CAAd;AACA,MAAIC,WAAW,GAAG,EAAlB;;AAEA,WAASC,cAAT,CAAwBC,CAAxB,EAA2B;AACvBC,IAAAA,UAAU,CAACD,CAAC,CAACE,OAAH,CAAV;AACH;;AAGD,WAASC,cAAT,CAAwBC,KAAxB,EAA+BC,UAA/B,EAA2C;AACvC,QAAIH,OAAO,GAAGE,KAAK,CAACF,OAApB,CADuC,CAEvC;AACA;;AAEA,QAAIG,UAAJ,EAAgB;AACZV,MAAAA,QAAQ,CAACO,OAAO,CAACI,KAAT,CAAR,GAA0BJ,OAA1B;AACH,KAFD,MAEO;AACH,aAAOP,QAAQ,CAACO,OAAO,CAACI,KAAT,CAAf;AACH;AACJ;;AAEDhB,EAAAA,SAAS,CAAC,MAAK;AACPO,IAAAA,MAAM,CAACU,gBAAP,CACI,kBADJ,EAEI,UAAUP,CAAV,EAAa;AACTG,MAAAA,cAAc,CAACH,CAAD,EAAI,IAAJ,CAAd;AACH,KAJL,EAKI,KALJ;AAOAH,IAAAA,MAAM,CAACU,gBAAP,CACI,qBADJ,EAEI,UAAUP,CAAV,EAAa;AACTG,MAAAA,cAAc,CAACH,CAAD,EAAI,KAAJ,CAAd;AACH,KAJL,EAKI,KALJ;AAOH,GAfI,EAgBH,CAACN,EAAD,CAhBG,CAAT;AAkBH;;GAxCuBD,W","sourcesContent":["import React, { useEffect, useRef, useState} from \"react\";\r\n\r\nexport default function useGamepads(fn) {\r\n    var gamepads = {}\r\n    var haveEvents = 'ongamepadconnected' in window\r\n    var controllers = {}\r\n\r\n    function connecthandler(e) {\r\n        addgamepad(e.gamepad)\r\n    }\r\n\r\n\r\n    function gamepadHandler(event, connecting) {\r\n        var gamepad = event.gamepad\r\n        // Note:\r\n        // gamepad === navigator.getGamepads()[gamepad.index]\r\n\r\n        if (connecting) {\r\n            gamepads[gamepad.index] = gamepad\r\n        } else {\r\n            delete gamepads[gamepad.index]\r\n        }\r\n    }\r\n\r\n    useEffect(() =>{\r\n            window.addEventListener(\r\n                'gamepadconnected',\r\n                function (e) {\r\n                    gamepadHandler(e, true)\r\n                },\r\n                false\r\n            )\r\n            window.addEventListener(\r\n                'gamepaddisconnected',\r\n                function (e) {\r\n                    gamepadHandler(e, false)\r\n                },\r\n                false\r\n            )\r\n        }\r\n        , [fn])\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}