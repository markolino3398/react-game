{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\markm\\\\OneDrive\\\\Desktop\\\\gamedeveloper\\\\react-game\\\\src\\\\game-tools\\\\utils\\\\hooks\\\\gamepad-press\\\\GamepadsContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GamepadsContext = /*#__PURE__*/createContext();\nconst initialState = {\n  gamepads: {},\n  updateGlobalGamepads: () => {}\n};\n\nconst GamepadsProvider = ({\n  children\n}) => {\n  _s();\n\n  const [state, updateState] = useState(initialState);\n  return /*#__PURE__*/_jsxDEV(GamepadsContext.Provider, {\n    value: {\n      gamepads: state,\n      updateGlobalGamepads: updateState\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 9\n  }, this);\n};\n\n_s(GamepadsProvider, \"fMZuv2vfyOycBleuEpJ0qHpgS5s=\");\n\n_c = GamepadsProvider;\nexport { GamepadsProvider, GamepadsContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"GamepadsProvider\");","map":{"version":3,"sources":["C:/Users/markm/OneDrive/Desktop/gamedeveloper/react-game/src/game-tools/utils/hooks/gamepad-press/GamepadsContext.js"],"names":["React","createContext","useState","GamepadsContext","initialState","gamepads","updateGlobalGamepads","GamepadsProvider","children","state","updateState"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,QAA+C,OAA/C;;AAGA,MAAMC,eAAe,gBAAGF,aAAa,EAArC;AAEA,MAAMG,YAAY,GAAG;AACjBC,EAAAA,QAAQ,EAAE,EADO;AAEjBC,EAAAA,oBAAoB,EAAE,MAAM,CAAE;AAFb,CAArB;;AAKA,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACvC,QAAM,CAACC,KAAD,EAAQC,WAAR,IAAuBR,QAAQ,CAACE,YAAD,CAArC;AAEA,sBACI,QAAC,eAAD,CAAiB,QAAjB;AACI,IAAA,KAAK,EAAE;AAAEC,MAAAA,QAAQ,EAAEI,KAAZ;AAAmBH,MAAAA,oBAAoB,EAAEI;AAAzC,KADX;AAAA,cAGKF;AAHL;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CAVD;;GAAMD,gB;;KAAAA,gB;AAYN,SAASA,gBAAT,EAA2BJ,eAA3B","sourcesContent":["import React, { createContext, useState } from \"react\";\r\n\r\n\r\nconst GamepadsContext = createContext();\r\n\r\nconst initialState = {\r\n    gamepads: {},\r\n    updateGlobalGamepads: () => {}\r\n};\r\n\r\nconst GamepadsProvider = ({ children }) => {\r\n    const [state, updateState] = useState(initialState);\r\n\r\n    return (\r\n        <GamepadsContext.Provider\r\n            value={{ gamepads: state, updateGlobalGamepads: updateState }}\r\n        >\r\n            {children}\r\n        </GamepadsContext.Provider>\r\n    );\r\n};\r\n\r\nexport { GamepadsProvider, GamepadsContext };"]},"metadata":{},"sourceType":"module"}