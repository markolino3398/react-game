{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\markm\\\\OneDrive\\\\Desktop\\\\gamedeveloper\\\\react-game\\\\src\\\\gametools\\\\utils\\\\fullscreen\\\\GameView.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport useFullscreenStatus from \"./useFullScreenStatus\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GameView({\n  children,\n  backgroundColor\n}) {\n  _s();\n\n  const maximizableElement = React.useRef(null);\n  let isFullscreen, setIsFullscreen;\n  let errorMessage;\n\n  try {\n    [isFullscreen, setIsFullscreen] = useFullscreenStatus(maximizableElement);\n  } catch (e) {\n    errorMessage = \"Fullscreen not supported\";\n    isFullscreen = false;\n    setIsFullscreen = undefined;\n  }\n\n  const handleExitFullscreen = () => document.exitFullscreen();\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: maximizableElement,\n    className: `maximizable-container ${isFullscreen ? \"fullscreen\" : \"default\"}`,\n    style: {\n      backgroundColor: isFullscreen ? backgroundColor : null\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"maximizable-content\",\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"maximizable-actions\",\n      children: errorMessage ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => alert(\"Fullscreen is unsupported by this browser, please try another browser.\"),\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 21\n      }, this) : isFullscreen ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleExitFullscreen,\n        children: \"Exit Fullscreen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: setIsFullscreen,\n        children: \"Fullscreen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GameView, \"jOzcR51njCpQ8ktYc18KchTzzg4=\", false, function () {\n  return [useFullscreenStatus];\n});\n\n_c = GameView;\n\nvar _c;\n\n$RefreshReg$(_c, \"GameView\");","map":{"version":3,"sources":["C:/Users/markm/OneDrive/Desktop/gamedeveloper/react-game/src/gametools/utils/fullscreen/GameView.js"],"names":["React","useFullscreenStatus","GameView","children","backgroundColor","maximizableElement","useRef","isFullscreen","setIsFullscreen","errorMessage","e","undefined","handleExitFullscreen","document","exitFullscreen","alert"],"mappings":";;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;;AAEA,eAAe,SAASC,QAAT,CAAkB;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAlB,EAAiD;AAAA;;AAC5D,QAAMC,kBAAkB,GAAGL,KAAK,CAACM,MAAN,CAAa,IAAb,CAA3B;AACA,MAAIC,YAAJ,EAAkBC,eAAlB;AACA,MAAIC,YAAJ;;AAEA,MAAI;AACA,KAACF,YAAD,EAAeC,eAAf,IAAkCP,mBAAmB,CAACI,kBAAD,CAArD;AACH,GAFD,CAEE,OAAOK,CAAP,EAAU;AACRD,IAAAA,YAAY,GAAG,0BAAf;AACAF,IAAAA,YAAY,GAAG,KAAf;AACAC,IAAAA,eAAe,GAAGG,SAAlB;AACH;;AAED,QAAMC,oBAAoB,GAAG,MAAMC,QAAQ,CAACC,cAAT,EAAnC;;AAEA,sBACI;AACI,IAAA,GAAG,EAAET,kBADT;AAEI,IAAA,SAAS,EAAG,yBACRE,YAAY,GAAG,YAAH,GAAkB,SACjC,EAJL;AAKI,IAAA,KAAK,EAAE;AAAEH,MAAAA,eAAe,EAAEG,YAAY,GAAGH,eAAH,GAAqB;AAApD,KALX;AAAA,4BAOI;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA,gBAAsCD;AAAtC;AAAA;AAAA;AAAA;AAAA,YAPJ,eAQI;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA,gBACKM,YAAY,gBACT;AACI,QAAA,OAAO,EAAE,MACLM,KAAK,CACD,wEADC,CAFb;AAAA,kBAOKN;AAPL;AAAA;AAAA;AAAA;AAAA,cADS,GAUTF,YAAY,gBACZ;AAAQ,QAAA,OAAO,EAAEK,oBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADY,gBAGZ;AAAQ,QAAA,OAAO,EAAEJ,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAdR;AAAA;AAAA;AAAA;AAAA,YARJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA4BH;;GA3CuBN,Q;UAMkBD,mB;;;KANlBC,Q","sourcesContent":["\r\nimport React from \"react\";\r\nimport useFullscreenStatus from \"./useFullScreenStatus\";\r\n\r\nexport default function GameView({ children, backgroundColor }) {\r\n    const maximizableElement = React.useRef(null);\r\n    let isFullscreen, setIsFullscreen;\r\n    let errorMessage;\r\n\r\n    try {\r\n        [isFullscreen, setIsFullscreen] = useFullscreenStatus(maximizableElement);\r\n    } catch (e) {\r\n        errorMessage = \"Fullscreen not supported\";\r\n        isFullscreen = false;\r\n        setIsFullscreen = undefined;\r\n    }\r\n\r\n    const handleExitFullscreen = () => document.exitFullscreen();\r\n\r\n    return (\r\n        <div\r\n            ref={maximizableElement}\r\n            className={`maximizable-container ${\r\n                isFullscreen ? \"fullscreen\" : \"default\"\r\n            }`}\r\n            style={{ backgroundColor: isFullscreen ? backgroundColor : null }}\r\n        >\r\n            <div className=\"maximizable-content\">{children}</div>\r\n            <div className=\"maximizable-actions\">\r\n                {errorMessage ? (\r\n                    <button\r\n                        onClick={() =>\r\n                            alert(\r\n                                \"Fullscreen is unsupported by this browser, please try another browser.\"\r\n                            )\r\n                        }\r\n                    >\r\n                        {errorMessage}\r\n                    </button>\r\n                ) : isFullscreen ? (\r\n                    <button onClick={handleExitFullscreen}>Exit Fullscreen</button>\r\n                ) : (\r\n                    <button onClick={setIsFullscreen}>Fullscreen</button>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}