{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nexport default function useGamePadPress(fn) {\n  _s();\n\n  const hasGamepadAPI = () => \"getGamepads\" in navigator;\n\n  useEffect(() => {\n    let gamepadIndex;\n\n    if (hasGamepadAPI()) {\n      window.addEventListener(\"gamepadconnected\", function (e) {\n        gamepadIndex = e.gamepad.index;\n        setInterval(() => {\n          if (gamepadIndex !== undefined) {\n            // a gamepad is connected and has an index\n            const myGamepad = navigator.getGamepads()[gamepadIndex];\n\n            if (myGamepad) {\n              myGamepad.buttons.map(e => e.pressed).forEach((isPressed, buttonIndex) => {\n                if (isPressed) {\n                  console.log(buttonIndex);\n                }\n              });\n              myGamepad.axes.map(e => {\n                let tempvalue = e.toString() * 100;\n\n                if (tempvalue > 20 || tempvalue < -20) {\n                  console.log(tempvalue);\n                }\n              });\n            }\n          }\n        }, 100);\n      });\n      window.addEventListener(\"gamepaddisconnected\", function (e) {\n        console.log(e);\n      });\n    } else {\n      alert(\"No gamepad associated to your computer\");\n    }\n  }, [fn]);\n}\n\n_s(useGamePadPress, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");","map":{"version":3,"sources":["C:/Users/markm/OneDrive/Desktop/gamedeveloper/react-game/src/game-tools/utils/hooks/gamepad-press/useGamePadPress.js"],"names":["useEffect","useState","useGamePadPress","fn","hasGamepadAPI","navigator","gamepadIndex","window","addEventListener","e","gamepad","index","setInterval","undefined","myGamepad","getGamepads","buttons","map","pressed","forEach","isPressed","buttonIndex","console","log","axes","tempvalue","toString","alert"],"mappings":";;AAAA,SAAQA,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AAGA,eAAe,SAASC,eAAT,CAAyBC,EAAzB,EAA6B;AAAA;;AACxC,QAAMC,aAAa,GAAG,MAAM,iBAAiBC,SAA7C;;AAEAL,EAAAA,SAAS,CAAC,MAAK;AAEP,QAAIM,YAAJ;;AAEA,QAAGF,aAAa,EAAhB,EAAmB;AACfG,MAAAA,MAAM,CAACC,gBAAP,CAAwB,kBAAxB,EAA4C,UAASC,CAAT,EAAY;AACpDH,QAAAA,YAAY,GAAGG,CAAC,CAACC,OAAF,CAAUC,KAAzB;AACAC,QAAAA,WAAW,CAAC,MAAM;AACd,cAAGN,YAAY,KAAKO,SAApB,EAA+B;AAC3B;AACA,kBAAMC,SAAS,GAAGT,SAAS,CAACU,WAAV,GAAwBT,YAAxB,CAAlB;;AACA,gBAAGQ,SAAH,EAAa;AACTA,cAAAA,SAAS,CAACE,OAAV,CAAkBC,GAAlB,CAAsBR,CAAC,IAAIA,CAAC,CAACS,OAA7B,EAAsCC,OAAtC,CAA8C,CAACC,SAAD,EAAYC,WAAZ,KAA4B;AACtE,oBAAGD,SAAH,EAAc;AACVE,kBAAAA,OAAO,CAACC,GAAR,CAAYF,WAAZ;AACH;AACJ,eAJD;AAMAP,cAAAA,SAAS,CAACU,IAAV,CAAeP,GAAf,CAAmBR,CAAC,IAAI;AACpB,oBAAIgB,SAAS,GAAGhB,CAAC,CAACiB,QAAF,KAAa,GAA7B;;AACA,oBAAGD,SAAS,GAAG,EAAZ,IAAkBA,SAAS,GAAG,CAAC,EAAlC,EAAqC;AACjCH,kBAAAA,OAAO,CAACC,GAAR,CAAYE,SAAZ;AACH;AACJ,eALD;AAMH;AAEJ;AACJ,SApBU,EAoBR,GApBQ,CAAX;AAqBH,OAvBD;AAyBAlB,MAAAA,MAAM,CAACC,gBAAP,CAAwB,qBAAxB,EAA+C,UAAUC,CAAV,EAAa;AACxDa,QAAAA,OAAO,CAACC,GAAR,CAAYd,CAAZ;AACH,OAFD;AAGH,KA7BD,MA6BK;AACDkB,MAAAA,KAAK,CAAC,wCAAD,CAAL;AACH;AAGJ,GAtCI,EAuCH,CAACxB,EAAD,CAvCG,CAAT;AAyCH;;GA5CuBD,e","sourcesContent":["import {useEffect, useState} from \"react\";\r\n\r\n\r\nexport default function useGamePadPress(fn) {\r\n    const hasGamepadAPI = () => \"getGamepads\" in navigator;\r\n\r\n    useEffect(() =>{\r\n\r\n            let gamepadIndex;\r\n\r\n            if(hasGamepadAPI()){\r\n                window.addEventListener(\"gamepadconnected\", function(e) {\r\n                    gamepadIndex = e.gamepad.index;\r\n                    setInterval(() => {\r\n                        if(gamepadIndex !== undefined) {\r\n                            // a gamepad is connected and has an index\r\n                            const myGamepad = navigator.getGamepads()[gamepadIndex];\r\n                            if(myGamepad){\r\n                                myGamepad.buttons.map(e => e.pressed).forEach((isPressed, buttonIndex) => {\r\n                                    if(isPressed) {\r\n                                        console.log(buttonIndex);\r\n                                    }\r\n                                })\r\n\r\n                                myGamepad.axes.map(e => {\r\n                                    let tempvalue = e.toString()*100;\r\n                                    if(tempvalue > 20 || tempvalue < -20){\r\n                                        console.log(tempvalue);\r\n                                    }\r\n                                });\r\n                            }\r\n\r\n                        }\r\n                    }, 100)\r\n                });\r\n\r\n                window.addEventListener(\"gamepaddisconnected\", function (e) {\r\n                    console.log(e);\r\n                });\r\n            }else{\r\n                alert(\"No gamepad associated to your computer\")\r\n            }\r\n\r\n\r\n        }\r\n        , [fn]);\r\n\r\n}"]},"metadata":{},"sourceType":"module"}