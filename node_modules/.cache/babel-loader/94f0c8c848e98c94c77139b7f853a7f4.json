{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\markm\\\\OneDrive\\\\Desktop\\\\gamedeveloper\\\\react-game\\\\src\\\\info.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Info() {\n  return /*#__PURE__*/_jsxDEV(\"header\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Fullscreen API with React\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"See some ways to use the Fullscreen API using React JS.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"The Fullscreen API allows you to make an element fullscreen and detect if any element is currently fullscreen.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"How is the API being used in this example?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"There are two elements below which represent blog posts. They each have a \\\"fullscreen\\\" button. Clicking the button will ask the browser to set the blog post to fullscreen. Using a custom hook, we can determine if an element is in fullscreen mode and change the button to \\\"Exit Fullscreen\\\"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 9\n  }, this);\n}\n_c = Info;\n\nvar _c;\n\n$RefreshReg$(_c, \"Info\");","map":{"version":3,"sources":["C:/Users/markm/OneDrive/Desktop/gamedeveloper/react-game/src/info.js"],"names":["React","Info"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,eAAe,SAASC,IAAT,GAAgB;AAC3B,sBACI;AAAA,4BACI;AAAI,MAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,eAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPJ,eAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBH;KAlBuBA,I","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Info() {\r\n    return (\r\n        <header>\r\n            <h1 className=\"title\">Fullscreen API with React</h1>\r\n            <p>See some ways to use the Fullscreen API using React JS.</p>\r\n            <p>\r\n                The Fullscreen API allows you to make an element fullscreen and detect\r\n                if any element is currently fullscreen.\r\n            </p>\r\n            <h4>How is the API being used in this example?</h4>\r\n            <p>\r\n                There are two elements below which represent blog posts. They each have\r\n                a \"fullscreen\" button. Clicking the button will ask the browser to set\r\n                the blog post to fullscreen. Using a custom hook, we can determine if an\r\n                element is in fullscreen mode and change the button to \"Exit Fullscreen\"\r\n            </p>\r\n        </header>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}