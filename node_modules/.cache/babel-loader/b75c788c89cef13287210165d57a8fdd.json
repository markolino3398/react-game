{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\markm\\\\OneDrive\\\\Desktop\\\\gamedeveloper\\\\react-game\\\\src\\\\game-tools\\\\utils\\\\hooks\\\\gamepad-press\\\\useGamePad.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GamepadController() {\n  _s();\n\n  const [gamepads, setGamepads] = useState({});\n  const requestRef = useRef();\n  const {\n    gamepads: globalGamepads,\n    updateGlobalGamepads\n  } = useContext(GamepadsContext);\n  var haveEvents = (\"ongamepadconnected\" in window);\n\n  const addGamepad = gamepad => {\n    // console.log(\n    //   \"Gamepad connected at index %d: %s. %d buttons, %d axes.\",\n    //   gamepad.index,\n    //   gamepad.id,\n    //   gamepad.buttons.length,\n    //   gamepad.axes.length\n    // );\n    updateGlobalGamepads({ ...gamepads,\n      [gamepad.index]: {\n        buttons: gamepad.buttons,\n        id: gamepad.id,\n        axes: gamepad.axes\n      }\n    });\n    setGamepads({ ...gamepads,\n      [gamepad.index]: {\n        buttons: gamepad.buttons,\n        id: gamepad.id,\n        axes: gamepad.axes\n      }\n    }); // Receive controller input\n    // requestAnimationFrame(updateStatus);\n  };\n  /**\r\n   * Adds game controllers during connection event listener\r\n   * @param {object} e\r\n   */\n\n\n  const connectGamepadHandler = e => {\n    addGamepad(e.gamepad); // console.log(\"connecting gamepads\", e, e.gamepad);\n  };\n  /**\r\n   * Finds all gamepads and adds them to context\r\n   */\n\n\n  const scanGamepads = () => {\n    // Grab gamepads from browser API\n    var detectedGamepads = navigator.getGamepads ? navigator.getGamepads() : navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : []; // Loop through all detected controllers and add if not already in state\n\n    for (var i = 0; i < detectedGamepads.length; i++) {\n      if (detectedGamepads[i]) {\n        addGamepad(detectedGamepads[i]);\n      }\n    }\n  }; // Add event listener for gamepad connecting\n\n\n  useEffect(() => {\n    window.addEventListener(\"gamepadconnected\", connectGamepadHandler);\n    return window.removeEventListener(\"gamepadconnected\", connectGamepadHandler);\n  }); // Update each gamepad's status on each \"tick\"\n\n  const animate = time => {\n    if (!haveEvents) scanGamepads();\n    requestRef.current = requestAnimationFrame(animate);\n  };\n\n  useEffect(() => {\n    requestRef.current = requestAnimationFrame(animate);\n    return () => cancelAnimationFrame(requestRef.current);\n  }); // Check for new gamepads regularly\n\n  useInterval(() => {\n    if (!haveEvents) scanGamepads();\n  }, 1000); // console.log(\"component rendering\", gamepads);\n\n  const gamepadDisplay = Object.keys(globalGamepads).map(gamepadId => {\n    // console.log(\"displaying gamepad\", gamepads[gamepadId]);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: globalGamepads[gamepadId].id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this), globalGamepads[gamepadId].buttons && globalGamepads[gamepadId].buttons.map((button, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [index, \": \", button.pressed ? \"True\" : \"False\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this);\n  }); // console.log(globalGamepads);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Gamepads\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Gamepads\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this), gamepadDisplay]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GamepadController, \"yYgNLs+Kkp3Ip1NY4yewcNJ0Pao=\", true);\n\n_c = GamepadController;\n\nvar _c;\n\n$RefreshReg$(_c, \"GamepadController\");","map":{"version":3,"sources":["C:/Users/markm/OneDrive/Desktop/gamedeveloper/react-game/src/game-tools/utils/hooks/gamepad-press/useGamePad.js"],"names":["React","useContext","useEffect","useRef","useState","GamepadController","gamepads","setGamepads","requestRef","globalGamepads","updateGlobalGamepads","GamepadsContext","haveEvents","window","addGamepad","gamepad","index","buttons","id","axes","connectGamepadHandler","e","scanGamepads","detectedGamepads","navigator","getGamepads","webkitGetGamepads","i","length","addEventListener","removeEventListener","animate","time","current","requestAnimationFrame","cancelAnimationFrame","useInterval","gamepadDisplay","Object","keys","map","gamepadId","button","pressed"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useRef, useState } from \"react\";\r\n\r\nexport default function GamepadController() {\r\n    const [gamepads, setGamepads] = useState({});\r\n    const requestRef = useRef();\r\n    const { gamepads: globalGamepads, updateGlobalGamepads } = useContext(\r\n        GamepadsContext\r\n    );\r\n\r\n    var haveEvents = \"ongamepadconnected\" in window;\r\n\r\n    const addGamepad = gamepad => {\r\n        // console.log(\r\n        //   \"Gamepad connected at index %d: %s. %d buttons, %d axes.\",\r\n        //   gamepad.index,\r\n        //   gamepad.id,\r\n        //   gamepad.buttons.length,\r\n        //   gamepad.axes.length\r\n        // );\r\n        updateGlobalGamepads({\r\n            ...gamepads,\r\n            [gamepad.index]: {\r\n                buttons: gamepad.buttons,\r\n                id: gamepad.id,\r\n                axes: gamepad.axes\r\n            }\r\n        });\r\n\r\n        setGamepads({\r\n            ...gamepads,\r\n            [gamepad.index]: {\r\n                buttons: gamepad.buttons,\r\n                id: gamepad.id,\r\n                axes: gamepad.axes\r\n            }\r\n        });\r\n\r\n        // Receive controller input\r\n        // requestAnimationFrame(updateStatus);\r\n    };\r\n\r\n    /**\r\n     * Adds game controllers during connection event listener\r\n     * @param {object} e\r\n     */\r\n    const connectGamepadHandler = e => {\r\n        addGamepad(e.gamepad);\r\n        // console.log(\"connecting gamepads\", e, e.gamepad);\r\n    };\r\n\r\n    /**\r\n     * Finds all gamepads and adds them to context\r\n     */\r\n    const scanGamepads = () => {\r\n        // Grab gamepads from browser API\r\n        var detectedGamepads = navigator.getGamepads\r\n            ? navigator.getGamepads()\r\n            : navigator.webkitGetGamepads\r\n                ? navigator.webkitGetGamepads()\r\n                : [];\r\n\r\n        // Loop through all detected controllers and add if not already in state\r\n        for (var i = 0; i < detectedGamepads.length; i++) {\r\n            if (detectedGamepads[i]) {\r\n                addGamepad(detectedGamepads[i]);\r\n            }\r\n        }\r\n    };\r\n\r\n    // Add event listener for gamepad connecting\r\n    useEffect(() => {\r\n        window.addEventListener(\"gamepadconnected\", connectGamepadHandler);\r\n\r\n        return window.removeEventListener(\r\n            \"gamepadconnected\",\r\n            connectGamepadHandler\r\n        );\r\n    });\r\n\r\n    // Update each gamepad's status on each \"tick\"\r\n    const animate = time => {\r\n        if (!haveEvents) scanGamepads();\r\n        requestRef.current = requestAnimationFrame(animate);\r\n    };\r\n\r\n    useEffect(() => {\r\n        requestRef.current = requestAnimationFrame(animate);\r\n        return () => cancelAnimationFrame(requestRef.current);\r\n    });\r\n\r\n    // Check for new gamepads regularly\r\n    useInterval(() => {\r\n        if (!haveEvents) scanGamepads();\r\n    }, 1000);\r\n\r\n    // console.log(\"component rendering\", gamepads);\r\n\r\n    const gamepadDisplay = Object.keys(globalGamepads).map(gamepadId => {\r\n        // console.log(\"displaying gamepad\", gamepads[gamepadId]);\r\n        return (\r\n            <div>\r\n                <h2>{globalGamepads[gamepadId].id}</h2>\r\n                {globalGamepads[gamepadId].buttons &&\r\n                globalGamepads[gamepadId].buttons.map((button, index) => (\r\n                    <div>\r\n                        {index}: {button.pressed ? \"True\" : \"False\"}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        );\r\n    });\r\n\r\n    // console.log(globalGamepads);\r\n    return (\r\n        <div className=\"Gamepads\">\r\n            <h1>Gamepads</h1>\r\n            {gamepadDisplay}\r\n        </div>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}