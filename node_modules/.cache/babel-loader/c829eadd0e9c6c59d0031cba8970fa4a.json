{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nexport default function useGamePadPress(fn) {\n  _s();\n\n  useEffect(() => {\n    let gamepadIndex;\n    window.addEventListener(\"gamepadconnected\", function (e) {\n      gamepadIndex = e.gamepad.index;\n    });\n    setInterval(() => {\n      if (gamepadIndex !== undefined) {\n        // a gamepad is connected and has an index\n        const myGamepad = navigator.getGamepads()[gamepadIndex];\n        console.log(`Left stick at (${myGamepad.axes[0]}, ${myGamepad.axes[1]})`);\n        console.log(`Right stick at (${myGamepad.axes[2]}, ${myGamepad.axes[3]})`);\n      }\n    }, 100);\n  }, [fn]);\n}\n\n_s(useGamePadPress, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");","map":{"version":3,"sources":["C:/Users/markm/OneDrive/Desktop/gamedeveloper/react-game/src/game-tools/utils/hooks/gamepad-press/useGamePadPress.js"],"names":["useEffect","useGamePadPress","fn","gamepadIndex","window","addEventListener","e","gamepad","index","setInterval","undefined","myGamepad","navigator","getGamepads","console","log","axes"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,OAA1B;AAGA,eAAe,SAASC,eAAT,CAAyBC,EAAzB,EAA6B;AAAA;;AAExCF,EAAAA,SAAS,CAAC,MAAK;AAEP,QAAIG,YAAJ;AAEAC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,kBAAxB,EAA4C,UAASC,CAAT,EAAY;AACpDH,MAAAA,YAAY,GAAGG,CAAC,CAACC,OAAF,CAAUC,KAAzB;AACH,KAFD;AAKAC,IAAAA,WAAW,CAAC,MAAM;AACd,UAAGN,YAAY,KAAKO,SAApB,EAA+B;AAC3B;AACA,cAAMC,SAAS,GAAGC,SAAS,CAACC,WAAV,GAAwBV,YAAxB,CAAlB;AACAW,QAAAA,OAAO,CAACC,GAAR,CAAa,kBAAiBJ,SAAS,CAACK,IAAV,CAAe,CAAf,CAAkB,KAAIL,SAAS,CAACK,IAAV,CAAe,CAAf,CAAkB,GAAtE;AACAF,QAAAA,OAAO,CAACC,GAAR,CAAa,mBAAkBJ,SAAS,CAACK,IAAV,CAAe,CAAf,CAAkB,KAAIL,SAAS,CAACK,IAAV,CAAe,CAAf,CAAkB,GAAvE;AACH;AACJ,KAPU,EAOR,GAPQ,CAAX;AAQH,GAjBI,EAkBH,CAACd,EAAD,CAlBG,CAAT;AAoBH;;GAtBuBD,e","sourcesContent":["import { useEffect } from \"react\";\r\n\r\n\r\nexport default function useGamePadPress(fn) {\r\n\r\n    useEffect(() =>{\r\n\r\n            let gamepadIndex;\r\n\r\n            window.addEventListener(\"gamepadconnected\", function(e) {\r\n                gamepadIndex = e.gamepad.index;\r\n            });\r\n\r\n\r\n            setInterval(() => {\r\n                if(gamepadIndex !== undefined) {\r\n                    // a gamepad is connected and has an index\r\n                    const myGamepad = navigator.getGamepads()[gamepadIndex];\r\n                    console.log(`Left stick at (${myGamepad.axes[0]}, ${myGamepad.axes[1]})` );\r\n                    console.log(`Right stick at (${myGamepad.axes[2]}, ${myGamepad.axes[3]})` );\r\n                }\r\n            }, 100)\r\n        }\r\n        , [fn]);\r\n\r\n}"]},"metadata":{},"sourceType":"module"}