{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nexport default function useGamePadPress(fn) {\n  _s();\n\n  const hasGamepadAPI = () => \"getGamepads\" in navigator;\n\n  const analogicType = {\n    0: {\n      id: \"Left analogic\",\n      direction: {\n        0: \"left\",\n        //if value < 0\n        1: \"right\" // if value > 0\n\n      }\n    },\n    1: {\n      id: \"Left analogic\",\n      direction: {\n        0: \"up\",\n        //if value < 0\n        1: \"down\" // if value > 0\n\n      }\n    },\n    2: {\n      id: \"Right analogic\",\n      direction: {\n        0: \"left\",\n        //if value < 0\n        1: \"right\" // if value > 0\n\n      }\n    },\n    3: {\n      id: \"Right analogic\",\n      direction: {\n        0: \"up\",\n        //if value < 0\n        1: \"down\" // if value > 0\n\n      }\n    }\n  };\n  useEffect(() => {\n    if (hasGamepadAPI()) {\n      window.addEventListener(\"gamepadconnected\", function (e) {\n        const gamepadIndex = e.gamepad.index;\n        setInterval(() => {\n          if (gamepadIndex !== undefined) {\n            // a gamepad is connected and has an index\n            const myGamepad = navigator.getGamepads()[gamepadIndex];\n\n            if (myGamepad) {\n              myGamepad.buttons.map(e => e.pressed).forEach((isPressed, buttonIndex) => {\n                if (isPressed) {\n                  console.log(myGamepad.id + \": Press the button---\");\n                  console.log(buttonIndex);\n                }\n              });\n              myGamepad.axes.map((e, index) => {\n                let tempvalue = e.toString() * 100;\n\n                if (tempvalue > 20 || tempvalue < -20) {\n                  console.log(myGamepad.id + \": Move analogic - \" + analogicType[index].id + \" in direction\" + (tempvalue > 0) ? analogicType[index].direction[1] : analogicType[index].direction[0]);\n                  console.log(tempvalue);\n                }\n              });\n            }\n          }\n        }, 100);\n      });\n      window.addEventListener(\"gamepaddisconnected\", function (e) {\n        console.log(e);\n      });\n    } else {\n      alert(\"No gamepad associated to your computer\");\n    }\n  }, [fn]);\n}\n\n_s(useGamePadPress, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");","map":{"version":3,"sources":["C:/Users/markm/OneDrive/Desktop/gamedeveloper/react-game/src/game-tools/utils/hooks/gamepad-press/useGamePadPress.js"],"names":["useEffect","useState","useGamePadPress","fn","hasGamepadAPI","navigator","analogicType","id","direction","window","addEventListener","e","gamepadIndex","gamepad","index","setInterval","undefined","myGamepad","getGamepads","buttons","map","pressed","forEach","isPressed","buttonIndex","console","log","axes","tempvalue","toString","alert"],"mappings":";;AAAA,SAAQA,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AAGA,eAAe,SAASC,eAAT,CAAyBC,EAAzB,EAA6B;AAAA;;AACxC,QAAMC,aAAa,GAAG,MAAM,iBAAiBC,SAA7C;;AACA,QAAMC,YAAY,GAAG;AACjB,OAAG;AACCC,MAAAA,EAAE,EAAE,eADL;AAECC,MAAAA,SAAS,EAAE;AACP,WAAG,MADI;AACI;AACX,WAAG,OAFI,CAEI;;AAFJ;AAFZ,KADc;AAQjB,OAAG;AACCD,MAAAA,EAAE,EAAE,eADL;AAECC,MAAAA,SAAS,EAAE;AACP,WAAG,IADI;AACE;AACT,WAAG,MAFI,CAEG;;AAFH;AAFZ,KARc;AAejB,OAAG;AACCD,MAAAA,EAAE,EAAE,gBADL;AAECC,MAAAA,SAAS,EAAE;AACP,WAAG,MADI;AACI;AACX,WAAG,OAFI,CAEI;;AAFJ;AAFZ,KAfc;AAsBjB,OAAG;AACCD,MAAAA,EAAE,EAAE,gBADL;AAECC,MAAAA,SAAS,EAAE;AACP,WAAG,IADI;AACE;AACT,WAAG,MAFI,CAEG;;AAFH;AAFZ;AAtBc,GAArB;AAgCAR,EAAAA,SAAS,CAAC,MAAK;AAEP,QAAGI,aAAa,EAAhB,EAAmB;AACfK,MAAAA,MAAM,CAACC,gBAAP,CAAwB,kBAAxB,EAA4C,UAASC,CAAT,EAAY;AACpD,cAAMC,YAAY,GAAGD,CAAC,CAACE,OAAF,CAAUC,KAA/B;AACAC,QAAAA,WAAW,CAAC,MAAM;AACd,cAAGH,YAAY,KAAKI,SAApB,EAA+B;AAC3B;AACA,kBAAMC,SAAS,GAAGZ,SAAS,CAACa,WAAV,GAAwBN,YAAxB,CAAlB;;AACA,gBAAGK,SAAH,EAAa;AACTA,cAAAA,SAAS,CAACE,OAAV,CAAkBC,GAAlB,CAAsBT,CAAC,IAAIA,CAAC,CAACU,OAA7B,EAAsCC,OAAtC,CAA8C,CAACC,SAAD,EAAYC,WAAZ,KAA4B;AACtE,oBAAGD,SAAH,EAAc;AACVE,kBAAAA,OAAO,CAACC,GAAR,CAAYT,SAAS,CAACV,EAAV,GAAe,uBAA3B;AACAkB,kBAAAA,OAAO,CAACC,GAAR,CAAYF,WAAZ;AACH;AACJ,eALD;AAOAP,cAAAA,SAAS,CAACU,IAAV,CAAeP,GAAf,CAAmB,CAACT,CAAD,EAAKG,KAAL,KAAc;AAC7B,oBAAIc,SAAS,GAAGjB,CAAC,CAACkB,QAAF,KAAa,GAA7B;;AACA,oBAAGD,SAAS,GAAG,EAAZ,IAAkBA,SAAS,GAAG,CAAC,EAAlC,EAAqC;AAEjCH,kBAAAA,OAAO,CAACC,GAAR,CAAYT,SAAS,CAACV,EAAV,GAAe,oBAAf,GAAoCD,YAAY,CAACQ,KAAD,CAAZ,CAAoBP,EAAxD,GAA4D,eAA5D,IAA8EqB,SAAS,GAAG,CAA1F,IAA8FtB,YAAY,CAACQ,KAAD,CAAZ,CAAoBN,SAApB,CAA+B,CAA/B,CAA9F,GAAkIF,YAAY,CAACQ,KAAD,CAAZ,CAAoBN,SAApB,CAA+B,CAA/B,CAA9I;AACAiB,kBAAAA,OAAO,CAACC,GAAR,CAAYE,SAAZ;AACH;AACJ,eAPD;AAQH;AAEJ;AACJ,SAvBU,EAuBR,GAvBQ,CAAX;AAwBH,OA1BD;AA4BAnB,MAAAA,MAAM,CAACC,gBAAP,CAAwB,qBAAxB,EAA+C,UAAUC,CAAV,EAAa;AACxDc,QAAAA,OAAO,CAACC,GAAR,CAAYf,CAAZ;AACH,OAFD;AAGH,KAhCD,MAgCK;AACDmB,MAAAA,KAAK,CAAC,wCAAD,CAAL;AACH;AAGJ,GAvCI,EAwCH,CAAC3B,EAAD,CAxCG,CAAT;AA0CH;;GA5EuBD,e","sourcesContent":["import {useEffect, useState} from \"react\";\r\n\r\n\r\nexport default function useGamePadPress(fn) {\r\n    const hasGamepadAPI = () => \"getGamepads\" in navigator;\r\n    const analogicType = {\r\n        0: {\r\n            id: \"Left analogic\",\r\n            direction: {\r\n                0: \"left\", //if value < 0\r\n                1: \"right\" // if value > 0\r\n            }\r\n        },\r\n        1: {\r\n            id: \"Left analogic\",\r\n            direction: {\r\n                0: \"up\", //if value < 0\r\n                1: \"down\" // if value > 0\r\n            }\r\n        },\r\n        2: {\r\n            id: \"Right analogic\",\r\n            direction: {\r\n                0: \"left\", //if value < 0\r\n                1: \"right\" // if value > 0\r\n            }\r\n        },\r\n        3: {\r\n            id: \"Right analogic\",\r\n            direction: {\r\n                0: \"up\", //if value < 0\r\n                1: \"down\" // if value > 0\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() =>{\r\n\r\n            if(hasGamepadAPI()){\r\n                window.addEventListener(\"gamepadconnected\", function(e) {\r\n                    const gamepadIndex = e.gamepad.index;\r\n                    setInterval(() => {\r\n                        if(gamepadIndex !== undefined) {\r\n                            // a gamepad is connected and has an index\r\n                            const myGamepad = navigator.getGamepads()[gamepadIndex];\r\n                            if(myGamepad){\r\n                                myGamepad.buttons.map(e => e.pressed).forEach((isPressed, buttonIndex) => {\r\n                                    if(isPressed) {\r\n                                        console.log(myGamepad.id + \": Press the button---\")\r\n                                        console.log(buttonIndex);\r\n                                    }\r\n                                })\r\n\r\n                                myGamepad.axes.map((e , index)=> {\r\n                                    let tempvalue = e.toString()*100;\r\n                                    if(tempvalue > 20 || tempvalue < -20){\r\n\r\n                                        console.log(myGamepad.id + \": Move analogic - \"+analogicType[index].id +\" in direction\"+ (tempvalue > 0)? analogicType[index].direction [1] : analogicType[index].direction [0] );\r\n                                        console.log(tempvalue);\r\n                                    }\r\n                                });\r\n                            }\r\n\r\n                        }\r\n                    }, 100)\r\n                });\r\n\r\n                window.addEventListener(\"gamepaddisconnected\", function (e) {\r\n                    console.log(e);\r\n                });\r\n            }else{\r\n                alert(\"No gamepad associated to your computer\")\r\n            }\r\n\r\n\r\n        }\r\n        , [fn]);\r\n\r\n}"]},"metadata":{},"sourceType":"module"}