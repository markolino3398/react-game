{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { createContext, useEffect, useRef, useState } from \"react\";\nexport default function useGamepads(fn) {\n  _s();\n\n  const gamepads = useRef({});\n  const requestRef = useRef();\n  var haveEvents = (\"ongamepadconnected\" in window);\n\n  const addGamepad = gamepad => {\n    console.log(\"Gamepad connected at index %d: %s. %d buttons, %d axes.\", gamepad.index, gamepad.id, gamepad.buttons.length, gamepad.axes.length);\n    gamepads.current = { ...gamepads.current,\n      [gamepad.index]: {\n        buttons: gamepad.buttons,\n        id: gamepad.id,\n        axes: gamepad.axes\n      }\n    }; // Send data to external callback (like React state)\n\n    fn(gamepads.current); // Handle controller input before render\n    // requestAnimationFrame(updateStatus);\n  };\n  /**\r\n   * Adds game controllers during connection event listener\r\n   * @param {object} e\r\n   */\n\n\n  const connectGamepadHandler = e => {\n    console.log(e);\n    addGamepad(e.gamepad);\n  };\n  /**\r\n   * Finds all gamepads and adds them to context\r\n   */\n\n\n  const scanGamepads = () => {\n    // Grab gamepads from browser API\n    var detectedGamepads = navigator.getGamepads ? navigator.getGamepads() : navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : [];\n    console.log(\"click\"); // Loop through all detected controllers and add if not already in state\n\n    for (var i = 0; i < detectedGamepads.length; i++) {\n      /*if (detectedGamepads[i] == detectedGamepads) {\r\n          addGamepad(detectedGamepads[i]);\r\n      }*/\n    }\n  }; // Add event listener for gamepad connecting\n\n\n  useEffect(() => {\n    window.addEventListener(\"gamepadconnected\", connectGamepadHandler);\n    return window.removeEventListener(\"gamepadconnected\", connectGamepadHandler);\n  }); // Update each gamepad's status on each \"tick\"\n\n  const animate = time => {\n    if (!haveEvents) scanGamepads();\n    requestRef.current = requestAnimationFrame(animate);\n  };\n\n  useEffect(() => {\n    requestRef.current = requestAnimationFrame(animate);\n    return () => cancelAnimationFrame(requestRef.current);\n  });\n  return gamepads.current;\n}\n\n_s(useGamepads, \"eFBG0A8gi2cIEKczBoRQtqKdESY=\");","map":{"version":3,"sources":["C:/Users/markm/OneDrive/Desktop/gamedeveloper/react-game/src/game-tools/utils/hooks/gamepad-press/useGamePad.js"],"names":["React","createContext","useEffect","useRef","useState","useGamepads","fn","gamepads","requestRef","haveEvents","window","addGamepad","gamepad","console","log","index","id","buttons","length","axes","current","connectGamepadHandler","e","scanGamepads","detectedGamepads","navigator","getGamepads","webkitGetGamepads","i","addEventListener","removeEventListener","animate","time","requestAnimationFrame","cancelAnimationFrame"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,aAAf,EAA8BC,SAA9B,EAAyCC,MAAzC,EAAiDC,QAAjD,QAAgE,OAAhE;AAEA,eAAe,SAASC,WAAT,CAAqBC,EAArB,EAAyB;AAAA;;AACpC,QAAMC,QAAQ,GAAGJ,MAAM,CAAC,EAAD,CAAvB;AACA,QAAMK,UAAU,GAAGL,MAAM,EAAzB;AAEA,MAAIM,UAAU,IAAG,wBAAwBC,MAA3B,CAAd;;AAEA,QAAMC,UAAU,GAAIC,OAAD,IAAa;AAC5BC,IAAAA,OAAO,CAACC,GAAR,CACI,yDADJ,EAEIF,OAAO,CAACG,KAFZ,EAGIH,OAAO,CAACI,EAHZ,EAIIJ,OAAO,CAACK,OAAR,CAAgBC,MAJpB,EAKIN,OAAO,CAACO,IAAR,CAAaD,MALjB;AAQAX,IAAAA,QAAQ,CAACa,OAAT,GAAmB,EACf,GAAGb,QAAQ,CAACa,OADG;AAEf,OAACR,OAAO,CAACG,KAAT,GAAiB;AACbE,QAAAA,OAAO,EAAEL,OAAO,CAACK,OADJ;AAEbD,QAAAA,EAAE,EAAEJ,OAAO,CAACI,EAFC;AAGbG,QAAAA,IAAI,EAAEP,OAAO,CAACO;AAHD;AAFF,KAAnB,CAT4B,CAkB5B;;AACAb,IAAAA,EAAE,CAACC,QAAQ,CAACa,OAAV,CAAF,CAnB4B,CAqB5B;AACA;AACH,GAvBD;AAyBA;AACJ;AACA;AACA;;;AACI,QAAMC,qBAAqB,GAAIC,CAAD,IAAO;AACjCT,IAAAA,OAAO,CAACC,GAAR,CAAYQ,CAAZ;AACAX,IAAAA,UAAU,CAACW,CAAC,CAACV,OAAH,CAAV;AACH,GAHD;AAKA;AACJ;AACA;;;AACI,QAAMW,YAAY,GAAG,MAAM;AACvB;AACA,QAAIC,gBAAgB,GAAGC,SAAS,CAACC,WAAV,GAAwBD,SAAS,CAACC,WAAV,EAAxB,GAAkDD,SAAS,CAACE,iBAAV,GAA8BF,SAAS,CAACE,iBAAV,EAA9B,GAA8D,EAAvI;AAEAd,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAJuB,CAKvB;;AACA,SAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,gBAAgB,CAACN,MAArC,EAA6CU,CAAC,EAA9C,EAAkD;AAC9C;AACZ;AACA;AACS;AACJ,GAXD,CA3CoC,CAwDpC;;;AACA1B,EAAAA,SAAS,CAAC,MAAM;AACZQ,IAAAA,MAAM,CAACmB,gBAAP,CAAwB,kBAAxB,EAA4CR,qBAA5C;AACA,WAAOX,MAAM,CAACoB,mBAAP,CAA2B,kBAA3B,EAA+CT,qBAA/C,CAAP;AACH,GAHQ,CAAT,CAzDoC,CA8DpC;;AAEA,QAAMU,OAAO,GAAIC,IAAD,IAAU;AACtB,QAAI,CAACvB,UAAL,EAAiBc,YAAY;AAC7Bf,IAAAA,UAAU,CAACY,OAAX,GAAqBa,qBAAqB,CAACF,OAAD,CAA1C;AACH,GAHD;;AAKA7B,EAAAA,SAAS,CAAC,MAAM;AACZM,IAAAA,UAAU,CAACY,OAAX,GAAqBa,qBAAqB,CAACF,OAAD,CAA1C;AACA,WAAO,MAAMG,oBAAoB,CAAC1B,UAAU,CAACY,OAAZ,CAAjC;AACH,GAHQ,CAAT;AAKA,SAAOb,QAAQ,CAACa,OAAhB;AACH;;GA3EuBf,W","sourcesContent":["import React, {createContext, useEffect, useRef, useState} from \"react\";\r\n\r\nexport default function useGamepads(fn) {\r\n    const gamepads = useRef({});\r\n    const requestRef = useRef();\r\n\r\n    var haveEvents = \"ongamepadconnected\" in window;\r\n\r\n    const addGamepad = (gamepad) => {\r\n        console.log(\r\n            \"Gamepad connected at index %d: %s. %d buttons, %d axes.\",\r\n            gamepad.index,\r\n            gamepad.id,\r\n            gamepad.buttons.length,\r\n            gamepad.axes.length\r\n        );\r\n\r\n        gamepads.current = {\r\n            ...gamepads.current,\r\n            [gamepad.index]: {\r\n                buttons: gamepad.buttons,\r\n                id: gamepad.id,\r\n                axes: gamepad.axes\r\n            }\r\n        };\r\n\r\n        // Send data to external callback (like React state)\r\n        fn(gamepads.current);\r\n\r\n        // Handle controller input before render\r\n        // requestAnimationFrame(updateStatus);\r\n    };\r\n\r\n    /**\r\n     * Adds game controllers during connection event listener\r\n     * @param {object} e\r\n     */\r\n    const connectGamepadHandler = (e) => {\r\n        console.log(e);\r\n        addGamepad(e.gamepad);\r\n    };\r\n\r\n    /**\r\n     * Finds all gamepads and adds them to context\r\n     */\r\n    const scanGamepads = () => {\r\n        // Grab gamepads from browser API\r\n        var detectedGamepads = navigator.getGamepads ? navigator.getGamepads() : navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : [];\r\n\r\n        console.log(\"click\");\r\n        // Loop through all detected controllers and add if not already in state\r\n        for (var i = 0; i < detectedGamepads.length; i++) {\r\n            /*if (detectedGamepads[i] == detectedGamepads) {\r\n                addGamepad(detectedGamepads[i]);\r\n            }*/\r\n        }\r\n    };\r\n\r\n    // Add event listener for gamepad connecting\r\n    useEffect(() => {\r\n        window.addEventListener(\"gamepadconnected\", connectGamepadHandler);\r\n        return window.removeEventListener(\"gamepadconnected\", connectGamepadHandler);\r\n    });\r\n\r\n    // Update each gamepad's status on each \"tick\"\r\n\r\n    const animate = (time) => {\r\n        if (!haveEvents) scanGamepads();\r\n        requestRef.current = requestAnimationFrame(animate);\r\n    };\r\n\r\n    useEffect(() => {\r\n        requestRef.current = requestAnimationFrame(animate);\r\n        return () => cancelAnimationFrame(requestRef.current);\r\n    });\r\n\r\n    return gamepads.current;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}