{"ast":null,"code":"const gamepadEvent = e => {\n  const analogicType = {\n    0: {\n      id: \"Left analogic\",\n      direction: {\n        0: \"left\",\n        //if value < 0\n        1: \"right\" // if value > 0\n\n      }\n    },\n    1: {\n      id: \"Left analogic\",\n      direction: {\n        0: \"up\",\n        //if value < 0\n        1: \"down\" // if value > 0\n\n      }\n    },\n    2: {\n      id: \"Right analogic\",\n      direction: {\n        0: \"left\",\n        //if value < 0\n        1: \"right\" // if value > 0\n\n      }\n    },\n    3: {\n      id: \"Right analogic\",\n      direction: {\n        0: \"up\",\n        //if value < 0\n        1: \"down\" // if value > 0\n\n      }\n    }\n  };\n  let gamepadInput = null;\n  const gamepadIndex = e.gamepad.index;\n  setInterval(() => {\n    if (gamepadIndex !== undefined) {\n      // a gamepad is connected and has an index\n      const myGamepad = navigator.getGamepads()[gamepadIndex];\n\n      if (myGamepad) {\n        myGamepad.buttons.map(e => e.pressed).forEach((isPressed, buttonIndex) => {\n          if (isPressed) {\n            gamepadInput = {\n              typeInput: \"button\",\n              gamepad: myGamepad.id,\n              buttonPressed: buttonIndex\n            };\n            console.log(gamepadInput);\n          }\n        });\n        myGamepad.axes.map((e, index) => {\n          let tempvalue = e.toString() * 100;\n\n          if (tempvalue > 20 || tempvalue < -20) {\n            let direction = tempvalue > 0 ? analogicType[index].direction[1] : analogicType[index].direction[0];\n            gamepadInput = {\n              typeInput: \"analogic\",\n              gamepad: myGamepad.id,\n              direction: direction,\n              percentualeMovement: tempvalue\n            };\n            console.log(gamepadInput);\n          }\n\n          return null;\n        });\n      }\n    }\n  }, 100);\n  return gamepadInput;\n};\n\nexport { gamepadEvent };","map":{"version":3,"sources":["C:/Users/markm/OneDrive/Desktop/gamedeveloper/react-game/src/game-tools/utils/hooks/gamepad-press/utils/gameInputEvent.js"],"names":["gamepadEvent","e","analogicType","id","direction","gamepadInput","gamepadIndex","gamepad","index","setInterval","undefined","myGamepad","navigator","getGamepads","buttons","map","pressed","forEach","isPressed","buttonIndex","typeInput","buttonPressed","console","log","axes","tempvalue","toString","percentualeMovement"],"mappings":"AAGA,MAAMA,YAAY,GAAIC,CAAD,IAAO;AAExB,QAAMC,YAAY,GAAG;AACjB,OAAG;AACCC,MAAAA,EAAE,EAAE,eADL;AAECC,MAAAA,SAAS,EAAE;AACP,WAAG,MADI;AACI;AACX,WAAG,OAFI,CAEI;;AAFJ;AAFZ,KADc;AAQjB,OAAG;AACCD,MAAAA,EAAE,EAAE,eADL;AAECC,MAAAA,SAAS,EAAE;AACP,WAAG,IADI;AACE;AACT,WAAG,MAFI,CAEG;;AAFH;AAFZ,KARc;AAejB,OAAG;AACCD,MAAAA,EAAE,EAAE,gBADL;AAECC,MAAAA,SAAS,EAAE;AACP,WAAG,MADI;AACI;AACX,WAAG,OAFI,CAEI;;AAFJ;AAFZ,KAfc;AAsBjB,OAAG;AACCD,MAAAA,EAAE,EAAE,gBADL;AAECC,MAAAA,SAAS,EAAE;AACP,WAAG,IADI;AACE;AACT,WAAG,MAFI,CAEG;;AAFH;AAFZ;AAtBc,GAArB;AA8BA,MAAIC,YAAY,GAAG,IAAnB;AACA,QAAMC,YAAY,GAAGL,CAAC,CAACM,OAAF,CAAUC,KAA/B;AAEAC,EAAAA,WAAW,CAAC,MAAM;AACd,QAAGH,YAAY,KAAKI,SAApB,EAA+B;AAC3B;AACA,YAAMC,SAAS,GAAGC,SAAS,CAACC,WAAV,GAAwBP,YAAxB,CAAlB;;AACA,UAAGK,SAAH,EAAa;AACTA,QAAAA,SAAS,CAACG,OAAV,CAAkBC,GAAlB,CAAsBd,CAAC,IAAIA,CAAC,CAACe,OAA7B,EAAsCC,OAAtC,CAA8C,CAACC,SAAD,EAAYC,WAAZ,KAA4B;AACtE,cAAGD,SAAH,EAAc;AACVb,YAAAA,YAAY,GAAG;AACXe,cAAAA,SAAS,EAAE,QADA;AAEXb,cAAAA,OAAO,EAAEI,SAAS,CAACR,EAFR;AAGXkB,cAAAA,aAAa,EAAEF;AAHJ,aAAf;AAKAG,YAAAA,OAAO,CAACC,GAAR,CAAYlB,YAAZ;AACH;AACJ,SATD;AAWAM,QAAAA,SAAS,CAACa,IAAV,CAAeT,GAAf,CAAmB,CAACd,CAAD,EAAKO,KAAL,KAAe;AAC9B,cAAIiB,SAAS,GAAGxB,CAAC,CAACyB,QAAF,KAAa,GAA7B;;AACA,cAAGD,SAAS,GAAG,EAAZ,IAAkBA,SAAS,GAAG,CAAC,EAAlC,EAAqC;AACjC,gBAAIrB,SAAS,GAAIqB,SAAS,GAAG,CAAb,GAAiBvB,YAAY,CAACM,KAAD,CAAZ,CAAoBJ,SAApB,CAA8B,CAA9B,CAAjB,GAAoDF,YAAY,CAACM,KAAD,CAAZ,CAAoBJ,SAApB,CAA8B,CAA9B,CAApE;AACAC,YAAAA,YAAY,GAAG;AACXe,cAAAA,SAAS,EAAE,UADA;AAEXb,cAAAA,OAAO,EAAEI,SAAS,CAACR,EAFR;AAGXC,cAAAA,SAAS,EAAEA,SAHA;AAIXuB,cAAAA,mBAAmB,EAAEF;AAJV,aAAf;AAOAH,YAAAA,OAAO,CAACC,GAAR,CAAYlB,YAAZ;AACH;;AACD,iBAAO,IAAP;AACH,SAdD;AAeH;AAEJ;AACJ,GAlCU,EAkCR,GAlCQ,CAAX;AAoCA,SAAOA,YAAP;AACH,CAxED;;AA2EA,SAAQL,YAAR","sourcesContent":["\r\n\r\n\r\nconst gamepadEvent = (e) => {\r\n\r\n    const analogicType = {\r\n        0: {\r\n            id: \"Left analogic\",\r\n            direction: {\r\n                0: \"left\", //if value < 0\r\n                1: \"right\" // if value > 0\r\n            }\r\n        },\r\n        1: {\r\n            id: \"Left analogic\",\r\n            direction: {\r\n                0: \"up\", //if value < 0\r\n                1: \"down\" // if value > 0\r\n            }\r\n        },\r\n        2: {\r\n            id: \"Right analogic\",\r\n            direction: {\r\n                0: \"left\", //if value < 0\r\n                1: \"right\" // if value > 0\r\n            }\r\n        },\r\n        3: {\r\n            id: \"Right analogic\",\r\n            direction: {\r\n                0: \"up\", //if value < 0\r\n                1: \"down\" // if value > 0\r\n            }\r\n        }\r\n    }\r\n    let gamepadInput = null;\r\n    const gamepadIndex = e.gamepad.index;\r\n\r\n    setInterval(() => {\r\n        if(gamepadIndex !== undefined) {\r\n            // a gamepad is connected and has an index\r\n            const myGamepad = navigator.getGamepads()[gamepadIndex];\r\n            if(myGamepad){\r\n                myGamepad.buttons.map(e => e.pressed).forEach((isPressed, buttonIndex) => {\r\n                    if(isPressed) {\r\n                        gamepadInput = {\r\n                            typeInput: \"button\",\r\n                            gamepad: myGamepad.id ,\r\n                            buttonPressed: buttonIndex\r\n                        }\r\n                        console.log(gamepadInput);\r\n                    }\r\n                })\r\n\r\n                myGamepad.axes.map((e , index) => {\r\n                    let tempvalue = e.toString()*100;\r\n                    if(tempvalue > 20 || tempvalue < -20){\r\n                        let direction = (tempvalue > 0)? analogicType[index].direction[1] : analogicType[index].direction[0];\r\n                        gamepadInput = {\r\n                            typeInput: \"analogic\",\r\n                            gamepad: myGamepad.id ,\r\n                            direction: direction,\r\n                            percentualeMovement: tempvalue\r\n                        }\r\n\r\n                        console.log(gamepadInput);\r\n                    }\r\n                    return null;\r\n                });\r\n            }\r\n\r\n        }\r\n    }, 100);\r\n\r\n    return gamepadInput;\r\n}\r\n\r\n\r\nexport {gamepadEvent}\r\n"]},"metadata":{},"sourceType":"module"}