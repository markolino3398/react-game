{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nexport default function useGamePadPress(fn) {\n  _s();\n\n  const hasGamepadAPI = () => \"getGamepads\" in navigator;\n\n  const analogicType = {\n    0: {\n      id: \"Left analogic\",\n      direction: {\n        0: \"left\",\n        //if value < 0\n        1: \"right\" // if value > 0\n\n      }\n    },\n    1: {\n      id: \"Left analogic\",\n      direction: {\n        0: \"up\",\n        //if value < 0\n        1: \"down\" // if value > 0\n\n      }\n    },\n    2: {\n      id: \"Right analogic\",\n      direction: {\n        0: \"left\",\n        //if value < 0\n        1: \"right\" // if value > 0\n\n      }\n    },\n    3: {\n      id: \"Right analogic\",\n      direction: {\n        0: \"up\",\n        //if value < 0\n        1: \"down\" // if value > 0\n\n      }\n    }\n  };\n  let jsonButtonInput = null;\n\n  const intervalCreation = gamepadIndex => setInterval(() => {\n    if (gamepadIndex !== undefined) {\n      // a gamepad is connected and has an index\n      const myGamepad = navigator.getGamepads()[gamepadIndex];\n\n      if (myGamepad) {\n        myGamepad.buttons.map(e => e.pressed).forEach((isPressed, buttonIndex) => {\n          if (isPressed) {\n            jsonButtonInput = {\n              typeInput: \"button\",\n              gamepad: myGamepad.id,\n              buttonPressed: buttonIndex\n            };\n            console.log(jsonButtonInput);\n          }\n        });\n        myGamepad.axes.map((e, index) => {\n          let tempvalue = e.toString() * 100;\n\n          if (tempvalue > 20 || tempvalue < -20) {\n            let direction = tempvalue > 0 ? analogicType[index].direction[1] : analogicType[index].direction[0];\n            console.log(myGamepad.id + \": Move \" + analogicType[index].id + \" in direction: \" + direction);\n            console.log(tempvalue);\n          }\n        });\n      }\n    }\n  }, 100);\n\n  useEffect(() => {\n    if (hasGamepadAPI()) {\n      window.addEventListener(\"gamepadconnected\", function (e) {\n        const gamepadIndex = e.gamepad.index;\n        intervalCreation(gamepadIndex);\n      });\n      window.addEventListener(\"gamepaddisconnected\", function (e) {\n        console.log(e);\n      });\n    } else {\n      alert(\"No gamepad associated to your computer\");\n    }\n  }, [fn]);\n}\n\n_s(useGamePadPress, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");","map":{"version":3,"sources":["C:/Users/markm/OneDrive/Desktop/gamedeveloper/react-game/src/game-tools/utils/hooks/gamepad-press/useGamePadPress.js"],"names":["useEffect","useGamePadPress","fn","hasGamepadAPI","navigator","analogicType","id","direction","jsonButtonInput","intervalCreation","gamepadIndex","setInterval","undefined","myGamepad","getGamepads","buttons","map","e","pressed","forEach","isPressed","buttonIndex","typeInput","gamepad","buttonPressed","console","log","axes","index","tempvalue","toString","window","addEventListener","alert"],"mappings":"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","sourcesContent":["import {useEffect} from \"react\";\r\n\r\n\r\nexport default function useGamePadPress(fn) {\r\n    const hasGamepadAPI = () => \"getGamepads\" in navigator;\r\n    const analogicType = {\r\n        0: {\r\n            id: \"Left analogic\",\r\n            direction: {\r\n                0: \"left\", //if value < 0\r\n                1: \"right\" // if value > 0\r\n            }\r\n        },\r\n        1: {\r\n            id: \"Left analogic\",\r\n            direction: {\r\n                0: \"up\", //if value < 0\r\n                1: \"down\" // if value > 0\r\n            }\r\n        },\r\n        2: {\r\n            id: \"Right analogic\",\r\n            direction: {\r\n                0: \"left\", //if value < 0\r\n                1: \"right\" // if value > 0\r\n            }\r\n        },\r\n        3: {\r\n            id: \"Right analogic\",\r\n            direction: {\r\n                0: \"up\", //if value < 0\r\n                1: \"down\" // if value > 0\r\n            }\r\n        }\r\n    }\r\n    let jsonButtonInput = null;\r\n\r\n    const intervalCreation = (gamepadIndex) => setInterval(() => {\r\n        if(gamepadIndex !== undefined) {\r\n            // a gamepad is connected and has an index\r\n            const myGamepad = navigator.getGamepads()[gamepadIndex];\r\n            if(myGamepad){\r\n                myGamepad.buttons.map(e => e.pressed).forEach((isPressed, buttonIndex) => {\r\n                    if(isPressed) {\r\n                        jsonButtonInput = {\r\n                            typeInput: \"button\",\r\n                            gamepad: myGamepad.id ,\r\n                            buttonPressed: buttonIndex\r\n                        }\r\n                        console.log(jsonButtonInput);\r\n                    }\r\n                })\r\n\r\n                myGamepad.axes.map((e , index)=> {\r\n                    let tempvalue = e.toString()*100;\r\n                    if(tempvalue > 20 || tempvalue < -20){\r\n                        let direction = (tempvalue > 0)? analogicType[index].direction [1] : analogicType[index].direction [0];\r\n                        console.log(myGamepad.id + \": Move \"+analogicType[index].id +\" in direction: \"+ direction);\r\n                        console.log(tempvalue);\r\n                    }\r\n                });\r\n            }\r\n\r\n        }\r\n    }, 100);\r\n\r\n    useEffect(() =>{\r\n\r\n            if(hasGamepadAPI()){\r\n                window.addEventListener(\"gamepadconnected\", function(e) {\r\n                    const gamepadIndex = e.gamepad.index;\r\n                    intervalCreation(gamepadIndex);\r\n                });\r\n\r\n                window.addEventListener(\"gamepaddisconnected\", function (e) {\r\n                    console.log(e);\r\n                });\r\n\r\n            }else{\r\n                alert(\"No gamepad associated to your computer\")\r\n            }\r\n\r\n        }\r\n        , [fn]);\r\n\r\n}"]},"metadata":{},"sourceType":"module"}