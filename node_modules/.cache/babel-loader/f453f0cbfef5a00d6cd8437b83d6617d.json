{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\markm\\\\OneDrive\\\\Desktop\\\\gamedeveloper\\\\react-game\\\\src\\\\game-component\\\\GameContainer.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Player from \"../game-tools/utils/player/player\";\nimport useKeyPress from \"../game-tools/utils/hooks/key-press/UseKeyPress\";\nimport useGamePadPress from \"../game-tools/utils/hooks/gamepad-press/useGamePadPress\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction GameContainer() {\n  _s();\n\n  const analogicType = {\n    0: {\n      id: \"Left analogic\",\n      direction: {\n        0: \"left\",\n        //if value < 0\n        1: \"right\" // if value > 0\n\n      }\n    },\n    1: {\n      id: \"Left analogic\",\n      direction: {\n        0: \"up\",\n        //if value < 0\n        1: \"down\" // if value > 0\n\n      }\n    },\n    2: {\n      id: \"Right analogic\",\n      direction: {\n        0: \"left\",\n        //if value < 0\n        1: \"right\" // if value > 0\n\n      }\n    },\n    3: {\n      id: \"Right analogic\",\n      direction: {\n        0: \"up\",\n        //if value < 0\n        1: \"down\" // if value > 0\n\n      }\n    }\n  };\n  let gamepadInput = null;\n  useGamePadPress(e => {\n    const gamepadIndex = e.gamepad.index;\n    setInterval(() => {\n      if (gamepadIndex !== undefined) {\n        // a gamepad is connected and has an index\n        const myGamepad = navigator.getGamepads()[gamepadIndex];\n\n        if (myGamepad) {\n          myGamepad.buttons.map(e => e.pressed).forEach((isPressed, buttonIndex) => {\n            if (isPressed) {\n              gamepadInput = {\n                typeInput: \"button\",\n                gamepad: myGamepad.id,\n                buttonPressed: buttonIndex\n              };\n              console.log(gamepadInput);\n            }\n          });\n          myGamepad.axes.map((e, index) => {\n            let tempvalue = e.toString() * 100;\n\n            if (tempvalue > 20 || tempvalue < -20) {\n              let direction = tempvalue > 0 ? analogicType[index].direction[1] : analogicType[index].direction[0];\n              gamepadInput = {\n                typeInput: \"analogic\",\n                gamepad: myGamepad.id,\n                direction: direction,\n                percentualeMovement: tempvalue\n              };\n              console.log(gamepadInput);\n            }\n\n            return null;\n          });\n        }\n      }\n    }, 100);\n  });\n  useKeyPress(keybord => {\n    console.log(keybord);\n    const dir = keybord.key.replace(\"Arrow\", \"\").toLowerCase();\n    console.log(dir);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: \"600px\",\n      width: \"600px\",\n      backgroundColor: \"#000000\"\n    },\n    children: /*#__PURE__*/_jsxDEV(Player, {\n      skin: \"heroes1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GameContainer, \"R/ENAVMaVlYT7aIIMcW2+wlE8J0=\", false, function () {\n  return [useGamePadPress, useKeyPress];\n});\n\n_c = GameContainer;\nexport default GameContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"GameContainer\");","map":{"version":3,"sources":["C:/Users/markm/OneDrive/Desktop/gamedeveloper/react-game/src/game-component/GameContainer.js"],"names":["React","Player","useKeyPress","useGamePadPress","GameContainer","analogicType","id","direction","gamepadInput","e","gamepadIndex","gamepad","index","setInterval","undefined","myGamepad","navigator","getGamepads","buttons","map","pressed","forEach","isPressed","buttonIndex","typeInput","buttonPressed","console","log","axes","tempvalue","toString","percentualeMovement","keybord","dir","key","replace","toLowerCase","height","width","backgroundColor"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Player from \"../game-tools/utils/player/player\";\r\nimport useKeyPress from \"../game-tools/utils/hooks/key-press/UseKeyPress\";\r\nimport useGamePadPress from \"../game-tools/utils/hooks/gamepad-press/useGamePadPress\";\r\n\r\n\r\nfunction GameContainer() {\r\n    \r\n    const analogicType = {\r\n        0: {\r\n            id: \"Left analogic\",\r\n            direction: {\r\n                0: \"left\", //if value < 0\r\n                1: \"right\" // if value > 0\r\n            }\r\n        },\r\n        1: {\r\n            id: \"Left analogic\",\r\n            direction: {\r\n                0: \"up\", //if value < 0\r\n                1: \"down\" // if value > 0\r\n            }\r\n        },\r\n        2: {\r\n            id: \"Right analogic\",\r\n            direction: {\r\n                0: \"left\", //if value < 0\r\n                1: \"right\" // if value > 0\r\n            }\r\n        },\r\n        3: {\r\n            id: \"Right analogic\",\r\n            direction: {\r\n                0: \"up\", //if value < 0\r\n                1: \"down\" // if value > 0\r\n            }\r\n        }\r\n    }\r\n    let gamepadInput = null;\r\n\r\n    useGamePadPress((e)=> {\r\n        const gamepadIndex = e.gamepad.index;\r\n        setInterval(() => {\r\n            if(gamepadIndex !== undefined) {\r\n                // a gamepad is connected and has an index\r\n                const myGamepad = navigator.getGamepads()[gamepadIndex];\r\n                if(myGamepad){\r\n                    myGamepad.buttons.map(e => e.pressed).forEach((isPressed, buttonIndex) => {\r\n                        if(isPressed) {\r\n                            gamepadInput = {\r\n                                typeInput: \"button\",\r\n                                gamepad: myGamepad.id ,\r\n                                buttonPressed: buttonIndex\r\n                            }\r\n                            console.log(gamepadInput);\r\n                        }\r\n                    })\r\n\r\n                    myGamepad.axes.map((e , index) => {\r\n                        let tempvalue = e.toString()*100;\r\n                        if(tempvalue > 20 || tempvalue < -20){\r\n                            let direction = (tempvalue > 0)? analogicType[index].direction[1] : analogicType[index].direction[0];\r\n                            gamepadInput = {\r\n                                typeInput: \"analogic\",\r\n                                gamepad: myGamepad.id ,\r\n                                direction: direction,\r\n                                percentualeMovement: tempvalue\r\n                            }\r\n\r\n\r\n                            console.log(gamepadInput);\r\n                        }\r\n                        return null;\r\n                    });\r\n                }\r\n\r\n            }\r\n        }, 100);\r\n    });\r\n\r\n    useKeyPress((keybord) => {\r\n        console.log(keybord)\r\n        const dir = keybord.key.replace(\"Arrow\", \"\").toLowerCase();\r\n        console.log(dir);\r\n    });\r\n\r\n\r\n    return(\r\n        <div style={{height: \"600px\", width: \"600px\", backgroundColor: \"#000000\"}}>\r\n            <Player skin=\"heroes1\" />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameContainer;"]},"metadata":{},"sourceType":"module"}