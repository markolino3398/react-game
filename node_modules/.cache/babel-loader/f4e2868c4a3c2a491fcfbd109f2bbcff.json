{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nexport default function useGamepads(fn) {\n  _s();\n\n  var gamepads = {};\n\n  function gamepadHandler(event, connecting) {\n    var gamepad = event.gamepad; // Note:\n    // gamepad === navigator.getGamepads()[gamepad.index]\n\n    if (connecting) {\n      gamepads[gamepad.index] = gamepad;\n    } else {\n      delete gamepads[gamepad.index];\n    }\n  }\n\n  useEffect(() => {\n    window.addEventListener('gamepadconnected', function (e) {\n      gamepadHandler(e, true);\n    }, false);\n    window.addEventListener('gamepaddisconnected', function (e) {\n      gamepadHandler(e, false);\n    }, false);\n  }, [fn]);\n}\n\n_s(useGamepads, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");","map":{"version":3,"sources":["C:/Users/markm/OneDrive/Desktop/gamedeveloper/react-game/src/game-tools/utils/hooks/gamepad-press/useGamePad.js"],"names":["React","useEffect","useRef","useState","useGamepads","fn","gamepads","gamepadHandler","event","connecting","gamepad","index","window","addEventListener","e"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAkD,OAAlD;AAEA,eAAe,SAASC,WAAT,CAAqBC,EAArB,EAAyB;AAAA;;AACpC,MAAIC,QAAQ,GAAG,EAAf;;AAEA,WAASC,cAAT,CAAwBC,KAAxB,EAA+BC,UAA/B,EAA2C;AACvC,QAAIC,OAAO,GAAGF,KAAK,CAACE,OAApB,CADuC,CAEvC;AACA;;AAEA,QAAID,UAAJ,EAAgB;AACZH,MAAAA,QAAQ,CAACI,OAAO,CAACC,KAAT,CAAR,GAA0BD,OAA1B;AACH,KAFD,MAEO;AACH,aAAOJ,QAAQ,CAACI,OAAO,CAACC,KAAT,CAAf;AACH;AACJ;;AAEDV,EAAAA,SAAS,CAAC,MAAK;AACPW,IAAAA,MAAM,CAACC,gBAAP,CACI,kBADJ,EAEI,UAAUC,CAAV,EAAa;AACTP,MAAAA,cAAc,CAACO,CAAD,EAAI,IAAJ,CAAd;AACH,KAJL,EAKI,KALJ;AAOAF,IAAAA,MAAM,CAACC,gBAAP,CACI,qBADJ,EAEI,UAAUC,CAAV,EAAa;AACTP,MAAAA,cAAc,CAACO,CAAD,EAAI,KAAJ,CAAd;AACH,KAJL,EAKI,KALJ;AAOH,GAfI,EAgBH,CAACT,EAAD,CAhBG,CAAT;AAkBH;;GAjCuBD,W","sourcesContent":["import React, { useEffect, useRef, useState} from \"react\";\r\n\r\nexport default function useGamepads(fn) {\r\n    var gamepads = {}\r\n\r\n    function gamepadHandler(event, connecting) {\r\n        var gamepad = event.gamepad\r\n        // Note:\r\n        // gamepad === navigator.getGamepads()[gamepad.index]\r\n\r\n        if (connecting) {\r\n            gamepads[gamepad.index] = gamepad\r\n        } else {\r\n            delete gamepads[gamepad.index]\r\n        }\r\n    }\r\n\r\n    useEffect(() =>{\r\n            window.addEventListener(\r\n                'gamepadconnected',\r\n                function (e) {\r\n                    gamepadHandler(e, true)\r\n                },\r\n                false\r\n            )\r\n            window.addEventListener(\r\n                'gamepaddisconnected',\r\n                function (e) {\r\n                    gamepadHandler(e, false)\r\n                },\r\n                false\r\n            )\r\n        }\r\n        , [fn])\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}